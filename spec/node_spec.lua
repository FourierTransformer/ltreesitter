local assert = require("luassert")
local ts = require("ltreesitter")
local util = require("spec.util")

describe("Node", function()
	local p
	setup(function()
		p = assert(ts.require("c"))
	end)
	it("name should return the name of the node", function()
		local t = p:parse_string[[ /* hello world */ ]]
		local n = t:root()
		assert.are.equal(n:name(), "translation_unit")
	end)
	it("type should return the type of the node", function()
		local t = p:parse_string[[ /* hello world */ ]]
		local n = t:root()
		assert.are.equal(n:type(), "translation_unit")
	end)
	it("child should return a Node (and the correct child)", function()
		local t = p:parse_string[[ /* hello world */ ]]
		local n = t:root():child(0)
		util.assert_userdata_type(n, "ltreesitter.TSNode")
		assert.are.equal(n:name(), "comment")
	end)
	it("child_count should return the correct number of children", function()
		local t = p:parse_string[[ /* hello world */ int main(void) { return 0; } ]]
		local n = t:root():child_count()
		assert.are.equal(type(n), "number")
		assert.are.equal(n, 2, "incorrect number of children")
	end)
	pending("child_by_field_name", function() end)
	pending("children", function() end)
	pending("create_cursor", function() end)
	pending("end_byte", function() end)
	pending("end_point", function() end)
	pending("is_extra", function() end)
	pending("is_missing", function() end)
	pending("is_named", function() end)
	pending("name", function() end)
	pending("named_child", function() end)
	pending("named_child_count", function() end)
	pending("named_children", function() end)
	pending("next_named_sibling", function() end)
	pending("next_sibling", function() end)
	pending("prev_named_sibling", function() end)
	pending("prev_sibling", function() end)
	pending("range", function() end)
	pending("start_byte", function() end)
	pending("start_point", function() end)
end)
