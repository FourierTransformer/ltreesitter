
local ts <const> = require("ltreesitter")
local p <const> = ts.require("c")

local lfs <const> = require("lfs")
local target <const> = "ltreesitter.so"
local compile_obj <const> = "$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDE)"

io.write[[
# This makefile is autogenerated by scripts/makefilegen.tl
# The only real autogenerated parts are each c file's dependencies, so editing it by hand is probably fine

# luarocks will override all of these so the running lua version wont matter in that case
LUA_VERSION = $(shell lua -e 'print(_VERSION:match("%d.%d"))')
LUA_DIR = /usr/local
LUA_INCDIR = $(LUA_DIR)/include
LUA_LIBDIR = $(LUA_DIR)/lib
LUA_SHAREDIR = $(LUA_DIR)/share/lua/$(LUA_VERSION)

INST_PREFIX = /usr/local
INST_BINDIR = $(INST_PREFIX)/bin
INST_LIBDIR = $(INST_PREFIX)/lib/lua/$(LUA_VERSION)
INST_LUADIR = $(INST_PREFIX)/share/lua/$(LUA_VERSION)
INST_CONFDIR = $(INST_PREFIX)/etc

CFLAGS = -Wall -Wextra -O2 -g -fPIC
LIBFLAG = -shared
OBJ =

USE_STATIC_TREESITTER = 0
TREE_SITTER_DIR = /usr/local
TREE_SITTER_INCDIR = $(TREE_SITTER_DIR)/include
TREE_SITTER_LIBDIR = $(TREE_SITTER_DIR)/lib
TREE_SITTER_STATIC_LIB = $(TREE_SITTER_LIBDIR)/libtree-sitter.a

USE_LIBUV = 0
LIBUV_DIR = /usr/local
LIBUV_INCDIR = $(LIBUV_DIR)/include
LIBUV_LIBDIR = $(LIBUV_DIR)/lib

INCLUDE += -I$(LUA_INCDIR) -I$(TREE_SITTER_INCDIR) -I./include
LDFLAGS += -L$(LUA_LIBDIR) -ldl -llua

]]

io.write("all: ", target, "\n\n")

local function parse_file(filename: string): ts.Tree, string
   local fh <const> = assert(io.open(filename, "r"))
   local content <const> = fh:read("*a")
   fh:close()

   return p:parse_string(content)
end

local q <const> = p:query[[
   ((preproc_include (system_lib_string) @lib)
    (#find? @lib "<ltreesitter/")) ]]

local files <const>: {string:{string}} = {}

for f in lfs.dir("csrc") do
   if f:match("%.c$") then
      files[f] = {}
      local tree <const> = parse_file("csrc/" .. f)
      for m in q:match(tree:root()) do
         table.insert(files[f], "csrc/" .. m.captures.lib:source():match("/(.*).h>$") .. ".c")
      end
   end
end

local objs <const> = {}

for f, deps in pairs(files) do
   local o <const> = f:gsub("%.c$", ".o")
	local rule <const> = {
		"OBJ += ", o, "\n",
		o, ": csrc/", f, " ", table.concat(deps, " "), "\n\t", compile_obj, "\n"
	}
	table.insert(objs, table.concat(rule))
end
table.sort(objs)
io.write(table.unpack(objs))

io.write[[

ifeq ($(USE_STATIC_TREESITTER), 0)
  LDFLAGS += -L$(TREE_SITTER_LIBDIR) -ltree-sitter
else
  OBJ += $(TREE_SITTER_STATIC_LIB)
endif

ifeq ($(USE_LIBUV), 1)
  LDFLAGS += -luv
endif

]]

io.write(target, ": $(OBJ)")
io.write("\n\t@echo -- Building ", target)
io.write("\n\t@echo CFLAGS: $(CFLAGS)")
io.write("\n\t@echo Using static treesitter? $(USE_STATIC_TREESITTER)")
io.write("\n\t@echo Using libuv? $(USE_LIBUV)")
io.write("\n\t$(CC) $(CFLAGS) $(LIBFLAG) -o $@ $(OBJ) $(LDFLAGS)\n")

io.write([[

install: ]]..target..[[

	@echo -- Installing ]]..target..[[

	@echo LUA_VERSION: $(LUA_VERSION)
	@echo INST_PREFIX: $(INST_PREFIX)
	@echo INST_BINDIR: $(INST_BINDIR)
	@echo INST_LIBDIR: $(INST_LIBDIR)
	@echo INST_LUADIR: $(INST_LUADIR)
	@echo INST_CONFDIR: $(INST_CONFDIR)
	mkdir -p $(INST_LIBDIR)/ltreesitter
	mkdir -p $(INST_LUADIR)
	cp ]]..target..[[ $(INST_LIBDIR)
	cp ltreesitter.d.tl $(INST_LUADIR)
]])

